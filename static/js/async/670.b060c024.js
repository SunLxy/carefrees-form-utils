"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["670"],{1840:function(e,n,a){a.r(n),a.d(n,{default:()=>o});var s=a(4246),t=a(980);function r(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"实体类",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实体类",children:"#"}),"实体类"]}),"\n",(0,s.jsxs)(n.h2,{id:"安装",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"}),"安装"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @carefrees/form-utils # yarn add @carefrees/form-utils # pnpm add @carefrees/form-utils\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"基础类型",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础类型",children:"#"}),"基础类型"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export interface MessageType {\n  /**信息*/\n  message?: string;\n  [s: string]: unknown;\n}\n\nexport interface ErrorDataField {\n  /**字段*/\n  name: string;\n  /**排序*/\n  sort?: string;\n  /**错误信息*/\n  errors: MessageType[];\n}\n\nexport interface ValidateErrorEntity<Values = any> {\n  /*值*/\n  values: Values;\n  /**错误信息*/\n  errorFields: ErrorDataField[];\n}\n\nexport interface Callbacks<Values = any> {\n  /**值更新触发*/\n  onValuesChange?: (changedValues: any, values: Values) => void;\n  /**提交保存 验证成功*/\n  onFinish?: (values: Values) => void;\n  /**提交保存 验证失败*/\n  onFinishFailed?: (errorInfo: ValidateErrorEntity<Values>) => void;\n}\n/**更新表单项操作类型*/\nexport type UpdatedOptType = 'restValues';\n\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"forminstancebase-实例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#forminstancebase-实例",children:"#"}),"FormInstanceBase 实例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { FormListInstanceBase } from '@carefrees/form-utils/esm/instance/formListInstance';\nimport { FormItemInstanceBase } from '@carefrees/form-utils/esm/instance/formItemInstance';\nimport { FormHideItemInstanceBase } from '@carefrees/form-utils/esm/instance/formHideItemInstance';\nimport { ErrorDataField, ValidateErrorEntity, UpdatedOptType } from '@carefrees/form-utils/esm/interface';\n/**基础实例*/\nexport declare class FormInstanceBase<T = any> {\n    /**表单数据*/\n    formData: Partial<T>;\n    /**表单每一项实例*/\n    formItemInstances: FormItemInstanceBase[];\n    /**表单中List实例集合*/\n    formListInstances: Map<string, FormListInstanceBase>;\n    /**隐藏组件集合*/\n    hideItemInstances: FormHideItemInstanceBase[];\n    /**隐藏组件字段对应的值*/\n    hideState: {};\n    /**实例是否初始化*/\n    isMountInstance: boolean;\n    /**是否保护值(不进行表单项组件卸载重置初始值)*/\n    preserve?: boolean;\n    hideRuleState: Record<string, boolean>;\n    /**值更新触发*/\n    onValuesChange?: (changedValues: any, values: T) => void;\n    /**提交保存 验证成功*/\n    onFinish?: (values: T) => void;\n    /**提交保存 验证失败*/\n    onFinishFailed?: (errorInfo: ValidateErrorEntity<T>) => void;\n    /**初始化*/\n    ctor: (initial?: Partial<T>, hideState?: Record<string, boolean>, hideRuleState?: Record<string, boolean>) => this;\n    /**\n     * 重置表单数据值\n     */\n    resetFormValues: (initial?: Partial<T>) => this | undefined;\n    /**\n     * 重置字段数据值\n     */\n    resetFieldsValue: (initial?: Partial<T>) => this;\n    /**注册一个 formIList 实例*/\n    registerFormList: (name: string, itemInstance: FormListInstanceBase) => () => void;\n    /**注册一个 formItem 实例*/\n    registerFormItem: (itemInstance: FormItemInstanceBase) => () => void;\n    /**注册一个 form hide item 实例*/\n    registerFormHideItem: (hideItemInstance: FormHideItemInstanceBase) => () => void;\n    /**更新字段是否隐藏*/\n    updatedFieldHideValue: (value: Record<string, boolean>) => this;\n    /**更新字段是否隐藏规则*/\n    updatedFieldHideRulesValue: (value: Record<string, boolean>) => this;\n    /**更新字段value值\n     *\n     * @param name 字段\n     * @param value 字段值\n     * @param validateType 校验规则处理\n     * @param isOnlySave 仅用于存储\n     *\n     */\n    updatedFieldValue: (name: string, value: any, validateType?: \"validate\" | \"clear\" | \"none\", isOnlySave?: boolean) => this | undefined;\n    /**\n     * 批量更新字段value值\n     *\n     * @param value 更新值\n     * @param isTransfer 是否触发 onValuesChange 事件\n     * @param isValidate 是否进行验证\n     * @param isOnlySave 仅用于存储\n     *\n     */\n    bathUpdatedFieldValue: (value: any, isTransfer?: boolean, isValidate?: boolean, isOnlySave?: boolean) => this | undefined;\n    /**获取 formList 实例或者集合*/\n    getFormListInstance: (name: string) => FormListInstanceBase | undefined;\n    /**获取字段值*/\n    getFieldValue: (name?: string) => any;\n    /**获取字段隐藏规则值*/\n    getFieldHideRulesValue: (name?: string) => any;\n    /**获取字段隐藏值*/\n    getFieldHideValue: (name?: string) => any;\n    /**通知组件更新*/\n    notice: (name?: string | string[], type?: UpdatedOptType) => this;\n    /**通知组件隐藏*/\n    noticeHide: (name?: string | string[]) => this;\n    /**通知监听方法*/\n    noticeWatch: (name?: string | string[]) => this;\n    /**\n     * 只进行验证，没有返回值\n     * */\n    onlyValidate: (name: string | string[]) => Promise<this>;\n    /**仅用于判断是否存在不通过校验的数据*/\n    onlyValidateRulesMessage: (names?: string[]) => Promise<{\n        errorFields: ErrorDataField[];\n    }>;\n    /**规则验证 ，默认不传递验证所有 */\n    validate: (names?: string[]) => Promise<T>;\n    /**\n     * 提交\n     */\n    submit: () => Promise<void>;\n}\n\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"formitembaseinstance-实例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formitembaseinstance-实例",children:"#"}),"FormItemBaseInstance 实例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { FormInstanceBase } from \'@carefrees/form-utils/esm/instance/formInstance\';\n\nexport declare class FormItemBaseInstance {\n    /**\n      * 顺序\n      * @example\n      * "0"\n      * "0-0"\n      * "0-0-0"\n     */\n    sort?: string;\n    /**\n     * 字段 ，分割方式与lodash的get和set方法值更新或设置路径一致\n     * @example\n     * 默认："name"\n     * 嵌套字段："name.a.doc"\n     * 嵌套字段："name[1].a.doc"\n     * 嵌套字段："name.a[2].doc"\n    */\n    name: string;\n    /**更新当前组件方法*/\n    updated?: Function;\n    /**依赖更新项*/\n    dependencies?: string[];\n    /**是否是 watch */\n    isWatch?: boolean;\n    /**表单实例*/\n    instance?: FormInstanceBase;\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"formiteminstancebase-实例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formiteminstancebase-实例",children:"#"}),"FormItemInstanceBase 实例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { RuleInstanceBase } from '@carefrees/form-utils/esm/instance/ruleIntsnace';\nimport { FormInstanceBase } from '@carefrees/form-utils/esm/instance/formInstance';\nimport { FormItemBaseInstance } from '@carefrees/form-utils/esm/instance/formItemBaseInstance';\n\nexport declare class FormItemInstanceBase extends FormItemBaseInstance {\n    /**父级字段*/\n    parentDataField?: string;\n    /**通知 只用于校验规则提示 字段 */\n    noticeOnlyRuleDataField?: string[];\n    /**通知父级字段监听方法更新*/\n    isNoticeParentField?: boolean;\n    /**通知watch监听方法更新*/\n    noticeWatchField?: string[];\n    /**label for属性值*/\n    htmlFor?: string;\n    /**输入框的属性数据*/\n    control?: any;\n    /**规则*/\n    rule?: RuleInstanceBase;\n    /**是否保护值(不进行表单项组件卸载重置初始值)*/\n    preserve?: boolean;\n    /**触发数据更新之后触发（用于数据联动之类的）*/\n    onAfterUpdate?: (value: any, instance: FormInstanceBase, instanceAttr: FormItemInstanceBase, event: any) => void;\n    /**更新方法*/\n    onChange?: (event: any) => void;\n    /**初始化*/\n    ctor: (name: string, rule?: RuleInstanceBase) => this;\n}\n\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"formlistinstancebase-实例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formlistinstancebase-实例",children:"#"}),"FormListInstanceBase 实例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { FormItemBaseInstance } from '@carefrees/form-utils/esm/instance/formItemBaseInstance';\nimport { RuleInstanceBase } from '@carefrees/form-utils/esm/instance/ruleIntsnace';\nimport { FormItemInstanceBase } from '@carefrees/form-utils/esm/instance/formItemInstance';\n\nexport declare class FormListInstanceBase extends FormItemBaseInstance {\n    /**规则*/\n    rule?: RuleInstanceBase;\n    /**表单实例*/\n    formItemInstance?: FormItemInstanceBase;\n    /**父级字段*/\n    parentDataField?: string;\n    /**记录key值*/\n    keys: number[];\n    /**累加数据，唯一性*/\n    id: number;\n    /**\n     * 初始化\n     * @param name 字段\n    */\n    ctor: (name: string) => this;\n    /**获取值*/\n    getLastValue: () => any[];\n    /**\n     * 添加一条\n     * @param initialValue 初始值\n     * @param unshift 是否加入数组前面\n    */\n    onAdd: (initialValue?: Object, unshift?: boolean) => void;\n    /**\n     * 删除\n     * @param index 删除数据下标\n    */\n    onDelete: (index: number | number[]) => void;\n    /**移动*/\n    onMove: (from: number, to: number) => void;\n    /**更新某个item数据*/\n    updatedItem: (index: number, item: any) => void;\n    /**获取渲染 list 字段拼接*/\n    getFields: () => {\n        name: number;\n        key: number;\n    }[];\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"formhideiteminstancebase-实例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formhideiteminstancebase-实例",children:"#"}),"FormHideItemInstanceBase 实例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { FormItemBaseInstance } from "@carefrees/form-utils/esm/instance/formItemBaseInstance";\nexport declare class FormHideItemInstanceBase extends FormItemBaseInstance {\n    /**初始化方法*/\n    ctor: (name: string) => this;\n    /**上次是否隐藏值*/\n    preHideValue?: boolean;\n    /**更新当前组件方法*/\n    updatedItem?: Function;\n    /**判读更新是否隐藏还是显示*/\n    updated: Function;\n}\n\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"multipleinstancebase-实例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#multipleinstancebase-实例",children:"#"}),"MultipleInstanceBase 实例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { FormInstanceBase } from '@carefrees/form-utils/esm/instance/formInstance';\n\nexport declare class MultipleInstanceBase {\n    private instanceMap;\n    /**\n     * 注册表单实例\n     * @param name 表单名称\n     * @param form 表单实例\n    */\n    ctor: (name: string, form: FormInstanceBase) => () => void;\n    /**\n     * 获取表单实例\n     * @param name 表单名称\n    */\n    getInstance: (name?: string) => FormInstanceBase<any> | Map<string, FormInstanceBase<any>> | undefined;\n    /**\n     * 验证表单规则\n     * @param namePath 表单名称(如果不传递表单名称,则验证所有表单)\n     *\n     * @example\n    */\n    validate: (namePath?: string | string[] | Record<string, string[]>) => Promise<unknown>;\n    /**\n     * 获取表单中值\n     * @param name 表单名称 (不存在时，获取所有表单值)\n     * @param path 字段路径 (不存在的时候直接获取对应表单所有值)\n     *\n    */\n    getFormFieldValue: (name?: string, dataField?: string | string[]) => {\n        [x: string]: any;\n    };\n}\n\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"ruleinstancebase-实例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ruleinstancebase-实例",children:"#"}),"RuleInstanceBase 实例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { MessageType } from \'@carefrees/form-utils/esm/interface\';\nimport { FormInstanceBase } from \'@carefrees/form-utils/esm/instance/formInstance\';\nimport { RuleItem } from "async-validator";\n\nexport declare class RuleInstanceBase {\n    /**\n       * 顺序\n       * @example\n       * "0"\n       * "0-0"\n       * "0-0-0"\n      */\n    sort?: string;\n    /**表单实例*/\n    instance?: FormInstanceBase;\n    /**\n     * 字段 ，分割方式与lodash的get和set方法值更新或设置路径一致\n     * @example\n     * 默认："name"\n     * 嵌套字段："name.a.doc"\n     * 嵌套字段："name[1].a.doc"\n     * 嵌套字段："name.a[2].doc"\n    */\n    name: string;\n    /**规则*/\n    rules?: RuleItem[];\n    /**错误提示内容*/\n    messages?: MessageType[] | string | undefined;\n    /**更新当前组件方法*/\n    updated?: Function;\n    /**判断是否必填*/\n    isRequired: () => boolean;\n    /**初始化*/\n    ctor: (name: string, rules: RuleItem[]) => this;\n    /**判断是否需要验证*/\n    isValidate: () => number | false;\n    /**更新提示信息*/\n    updatedMessages: (messages?: MessageType[] | string | undefined) => void;\n    /**更新规则*/\n    updatedRules: (rules: RuleItem[]) => void;\n    /**验证规则\n     * @param {boolean} isOnly 仅判断是否校验通过\n    */\n    validate: (isOnly?: boolean) => Promise<unknown>;\n    /**获取校验结果*/\n    getValidateResult: () => {\n        tip: string | (string | undefined)[];\n        isInvalid: boolean;\n    };\n}\n\n'})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}let o=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["core%2Findex.md"]={toc:[{id:"安装",text:"安装",depth:2},{id:"基础类型",text:"基础类型",depth:2},{id:"forminstancebase-实例",text:"FormInstanceBase 实例",depth:2},{id:"formitembaseinstance-实例",text:"FormItemBaseInstance 实例",depth:2},{id:"formiteminstancebase-实例",text:"FormItemInstanceBase 实例",depth:2},{id:"formlistinstancebase-实例",text:"FormListInstanceBase 实例",depth:2},{id:"formhideiteminstancebase-实例",text:"FormHideItemInstanceBase 实例",depth:2},{id:"multipleinstancebase-实例",text:"MultipleInstanceBase 实例",depth:2},{id:"ruleinstancebase-实例",text:"RuleInstanceBase 实例",depth:2}],title:"实体类",headingTitle:"实体类",frontmatter:{}}}}]);