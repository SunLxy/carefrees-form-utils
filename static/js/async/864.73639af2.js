"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["864"],{753:function(e,n,t){t.r(n),t.d(n,{default:()=>m});var r=t(4246),o=t(980);function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code",h3:"h3"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"react-native",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#react-native",children:"#"}),"React Native"]}),"\n",(0,r.jsxs)(n.h2,{id:"安装",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"}),"安装"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @carefrees/form-utils-react-native # yarn add @carefrees/form-utils-react-native # pnpm add @carefrees/form-utils-react-native\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"使用",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用",children:"#"}),"使用"]}),"\n",(0,r.jsxs)(n.h3,{id:"基本使用",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本使用",children:"#"}),"基本使用"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Form, FormItem } from \'@carefrees/form-utils-react-native\';\nimport React, { useState } from \'react\';\nimport { View, Button, Input } from \'react-native\';\n\nconst Demo = () => {\n  const [formData] = useState({ name: \'张三\', age: 18 });\n  const form = useForm();\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form formData={formData} form={form}>\n      <FormItem rules={[{ required: true, message: \'必填\' }]} name="name" label="name">\n        <Input style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <FormItem name="age" label="age">\n        <Input style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <Button onPress={onSubmit} title="验证" color="#841584" />\n    </Form>\n  );\n};\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"控制隐藏",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#控制隐藏",children:"#"}),"控制隐藏"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Form, FormItem, FormHideItem } from '@carefrees/form-utils-react-native';\nimport React, { useState } from 'react';\nimport { View, Button, Input } from 'react-native';\n\nconst Demo = () => {\n  const [formData] = useState({ name: '张三', age: 18 });\n  const form = useForm();\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onValuesChange = (item: any) => {\n    console.log('item', item);\n    if (Reflect.has(item, 'age')) {\n      if (item.age === '18') {\n        form.updatedFieldHideValue({ address: false });\n      } else {\n        form.updatedFieldHideValue({ address: true });\n      }\n    }\n  };\n\n  return (\n    <Form formData={formData} form={form} onValuesChange={onValuesChange} hideData={{ address: true }}>\n      <FormItem rules={[{ required: true, message: '必填' }]} name=\"name\" label=\"name\">\n        <Input style={{ width: '100%' }} placeholder=\"请输入\" />\n      </FormItem>\n      <FormItem name=\"age\" label=\"age\">\n        <Input style={{ width: '100%' }} placeholder=\"请输入18,显示address表单项\" />\n      </FormItem>\n      <FormHideItem name=\"address\" label=\"address\">\n        <Input style={{ width: '100%' }} placeholder=\"请输入\" />\n      </FormHideItem>\n      <Button onPress={onSubmit} title=\"验证\" color=\"#841584\" />\n    </Form>\n  );\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"表单字段监听",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单字段监听",children:"#"}),"表单字段监听"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Form, FormItem, useWatch } from '@carefrees/form-utils-react-native';\nimport React, { useState } from 'react';\nimport { View, Button, Input ,Text} from 'react-native';\n\n// 子节点\nconst Child = () => {\n  // 第一次监听可以获取到值\n  const [value] = useWatch('name');\n  return <View><Text>name值：{value}</Text></View>;\n};\n\nconst Demo = () => {\n  const [formData] = useState({ name: '张三', age: 18 });\n  const form = useForm();\n\n  // 在表单包裹内,第一次监听获取不到值\n  const [age] = useWatch('age', form);\n  console.log(age);\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form formData={formData} form={form}>\n      <FormItem rules={[{ required: true, message: '必填' }]} name=\"name\" label=\"name\">\n        <Input style={{ width: '100%' }} placeholder=\"请输入\" />\n      </FormItem>\n      <FormItem name=\"age\" label=\"age\">\n        <Input style={{ width: '100%' }} placeholder=\"请输入\" />\n      </FormItem>\n      <Child />\n      <Button onPress={onSubmit} title=\"验证\" color=\"#841584\" />\n    </Form>\n  );\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"list-表单项",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#list-表单项",children:"#"}),"list 表单项"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Form, FormItem, useWatch, useForm, FormList, FormLayoutRows, FormLayout } from '@carefrees/form-utils-react-native';\nimport React, { useState } from 'react';\nimport { View, Button, Input ,Text} from 'react-native';\n\n// 子节点\nconst Child = () => {\n  // 第一次监听可以获取到值\n  const [value] = useWatch('list');\n  return <View><Text>list值：{JSON.stringify(value)}</Text></View>;\n};\n\nconst Demo = () => {\n  const [formData] = useState({\n    name: '张三',\n    age: 18,\n    list: [{ name: '张三' }, { name: '李四' }],\n  });\n  const form = useForm();\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form formData={formData} form={form}>\n      <FormItem rules={[{ required: true, message: '必填' }]} name=\"name\" label=\"name\">\n        <Input style={{ width: '100%' }} placeholder=\"请输入\" />\n      </FormItem>\n      <FormItem name=\"age\" label=\"age\">\n        <Input style={{ width: '100%' }} placeholder=\"请输入\" />\n      </FormItem>\n      <FormLayoutRows>\n        <FormList name=\"list\">\n          {(options) => {\n            const fields = options.fields;\n            return (\n              <View>\n                <Button onPress={() => options.onAdd({})} title=\"添加一项数据\" color=\"#841584\" />\n                {fields.map((item, index) => {\n                  return (\n                    <FormLayout key={item.key}>\n                      <FormItem name={`[${item.name}].name`} label=\"子项name\">\n                        <Input style={{ width: '100%' }} placeholder=\"请输入\" />\n                      </FormItem>\n                      <View\n                        style={{\n                          display: 'flex',\n                          alignItems: 'flex-end',\n                          padding: 8,\n                        }}\n                      >\n                       <Button onPress={() => options.onDelete(index)} title=\"删除数据\" color=\"#841584\" />\n                      </View>\n                    </FormLayout>\n                  );\n                })}\n              </View>\n            );\n          }}\n        </FormList>\n      </FormLayoutRows>\n      <FormLayoutRows>\n        <Child />\n        <View style={{ display: 'flex', alignItems: 'flex-end', padding: 8 }}>\n          <Button onPress={onSubmit} title=\"验证\" color=\"#841584\" />\n        </View>\n      </FormLayoutRows>\n    </Form>\n  );\n};\nexport default Demo;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"表单项依赖更新dependencies-参数",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单项依赖更新dependencies-参数",children:"#"}),"表单项依赖更新(dependencies 参数)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Form, FormItem, useWatch, useForm, FormLayoutRows, useFormInstance } from \'@carefrees/form-utils-react-native\';\nimport React, { useState, useMemo } from \'react\';\nimport { View, Button, Input } from \'react-native\';\n\n// 子节点\nconst ChildInput = () => {\n  const form = useFormInstance();\n  const a = form.getFieldValue(\'a\');\n  const b = form.getFieldValue(\'b\');\n  const value = useMemo(() => {\n    if (a && b) {\n      return a * b;\n    }\n    return 0;\n  }, [a, b]);\n  // 第一次监听可以获取到值\n  return <Input placeholder="请输入a和b" disabled value={value} />;\n};\n\nconst Demo = () => {\n  const [formData] = useState({ a: 0, b: 0 });\n  const form = useForm();\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form formData={formData} form={form}>\n      <FormItem name="a" label="a">\n        <Input type="number" style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <FormItem name="b" label="b">\n        <Input type="number" style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <FormItem dependencies={[\'a\', \'b\']} name="c" label="c">\n        <ChildInput />\n      </FormItem>\n      <FormLayoutRows>\n        <View style={{ display: \'flex\', alignItems: \'flex-end\', padding: 8 }}>\n          <Button onPress={onSubmit} title="验证" color="#841584" />\n        </View>\n      </FormLayoutRows>\n    </Form>\n  );\n};\nexport default Demo;\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"布局组件",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#布局组件",children:"#"}),"布局组件"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import {\n  Form,\n  FormItem,\n  useWatch,\n  useForm,\n  FormLayoutRows,\n  useFormInstance,\n  FormLayout,\n} from \'@carefrees/form-utils-react-native\';\nimport React, { useState, useMemo } from \'react\';\nimport { View, Button, Input } from \'react-native\';\n\nconst Demo = () => {\n  const [formData] = useState({\n    a: \'\',\n    b: \'\',\n    c: \'\',\n    d: \'\',\n    e: \'\',\n    f: \'\',\n    g: \'\',\n    h: \'\',\n    j: \'\',\n    k: \'\',\n    l: \'\',\n    m: \'\',\n    address: \'\',\n  });\n  const form = useForm();\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form gap={14} colCount={2} formData={formData} form={form}>\n      <FormLayout formItemLabelStyle={{ width: 60 }} isAllColSpan labelMode="left" bordered title="标题1">\n        <FormItem rules={[{ required: true, message: \'必填\' }]} name="a" label="测试1">\n          <Input style={{ width: \'100%\' }} placeholder="请输入18,显示address表单项" />\n        </FormItem>\n        <FormItem name="address" label="address">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n      </FormLayout>\n      <FormLayout\n        isAllColSpan\n        labelMode="top"\n        bordered\n        title="标题2"\n      >\n        <FormItem colSpan={2} rules={[{ required: true, message: \'必填\' }]} name="a" label="测试1">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem rules={[{ required: true, message: \'必填\' }]} name="b" label="测试2">\n          <Input style={{ width: \'100%\', height: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="c" label="测试3">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="d" label="测试4">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="e" label="测试5">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="f" label="测试6">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="g" label="测试7">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="h" label="测试8">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="j" label="测试9">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="k" label="测试10">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <View>\n          <Button onPress={onSubmit} title="验证" color="#841584" />\n        </View>\n      </FormLayout>\n      <FormLayout isAllColSpan labelMode="top" title="标题2">\n        <FormItem rules={[{ required: true, message: \'必填\' }]} name="a" label="测试1">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n        <FormItem name="address" label="address">\n          <Input style={{ width: \'100%\' }} placeholder="请输入" />\n        </FormItem>\n      </FormLayout>\n    </Form>\n  );\n};\nexport default Demo;\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"类型",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"}),"类型"]}),"\n",(0,r.jsxs)(n.h3,{id:"form-表单",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#form-表单",children:"#"}),"Form 表单"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport { FormInstanceBase, ValidateErrorEntity } from '@carefrees/form-utils';\nimport { FormLayoutProps } from '@carefrees/form-utils-react-native/esm/layout';\nexport interface FormProps<T = any> extends FormLayoutProps {\n  children?: React.ReactNode;\n  form?: FormInstanceBase;\n  style?: React.CSSProperties;\n  layoutStyle?: React.CSSProperties;\n  /**表单数据*/\n  formData?: any;\n  /**值更新触发*/\n  onValuesChange?: (changedValues: Partial<T>, values: T) => void;\n  /**提交保存 验证成功*/\n  onFinish?: (values: T) => void;\n  /**提交保存 验证失败*/\n  onFinishFailed?: (errorInfo: ValidateErrorEntity<T>) => void;\n  /**隐藏表单项初始值*/\n  hideData?: Record<string, boolean>;\n  /**表单名称*/\n  name?: string;\n  /**隐藏规则校验*/\n  hideRuleData?: Record<string, boolean>;\n  /**自动重置更新formData数据*/\n  isAutoUpdatedFormData?: boolean;\n}\nexport declare function Form<T = any>(props: FormProps<T>): import('react/jsx-runtime').JSX.Element;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"formitem-表单项",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formitem-表单项",children:"#"}),"FormItem 表单项"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { LayoutFormItemProps } from '@carefrees/form-utils-react-native/esm/layout/layout.formItem';\nimport { FormItemAttrOptions } from '@carefrees/form-utils-react-native/esm/hooks/attr/attr.FormItem';\nexport interface FormItemProps extends FormItemAttrOptions, LayoutFormItemProps {\n  /**不进行样式渲染*/\n  noStyle?: boolean;\n}\n/**表单项*/\nexport declare const FormItem: import('react').MemoExoticComponent<\n  (props: Partial<FormItemProps>) => import('react/jsx-runtime').JSX.Element\n>;\n/**隐藏表单项*/\nexport declare const FormHideItem: import('react').MemoExoticComponent<\n  (props: FormItemProps) => import('react/jsx-runtime').JSX.Element\n>;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"formlist-表单-list",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formlist-表单-list",children:"#"}),"FormList 表单 List"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { RuleInstanceBase, FormItemInstanceBase, FormListInstanceBase } from '@carefrees/form-utils';\nimport React from 'react';\nimport { RegisterFormListOptions } from '@carefrees/form-utils-react-native-hooks';\nexport interface FormListChildrenProps {\n  /**数据集合*/\n  fields: {\n    name: number;\n    key: number;\n  }[];\n  /**添加*/\n  onAdd: (initialValue?: Object) => void;\n  /**删除*/\n  onDelete: (index: number | number[]) => void;\n  /**移动*/\n  onMove: (from: number, to: number) => void;\n}\nexport interface FormListProps extends RegisterFormListOptions {\n  children: (\n    options: FormListChildrenProps,\n    instances: {\n      ruleInstance: RuleInstanceBase;\n      formItemInstance: FormItemInstanceBase;\n      formListInstance: FormListInstanceBase;\n    },\n  ) => React.ReactNode;\n}\n/**form list 组件*/\nexport declare const FormList: React.MemoExoticComponent<\n  (props: FormListProps) => import('react/jsx-runtime').JSX.Element\n>;\n/**隐藏 form list item 组件*/\nexport declare const FormHideList: React.MemoExoticComponent<\n  (props: FormListProps) => import('react/jsx-runtime').JSX.Element\n>;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"布局组件-类型",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#布局组件-类型",children:"#"}),"布局组件 类型"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport { ViewProps } from 'react-native';\nimport { AttrsOptions } from '@carefrees/form-utils-react-native';\nexport interface FormLayoutProps extends AttrsOptions {\n  /**标题*/\n  title?: React.ReactNode;\n  /**额外内容*/\n  extra?: React.ReactNode;\n  /**内容*/\n  children?: React.ReactNode;\n  /**是否占据整行*/\n  isAllColSpan?: boolean;\n  style?: React.CSSProperties;\n  /**头部样式*/\n  headerStyle?: React.CSSProperties;\n  /**内容样式*/\n  bodyStyle?: React.CSSProperties;\n  /**是否添加边框*/\n  bordered?: boolean;\n  /**列数据*/\n  colCount?: number;\n  /**\n   * @description gap 属性是用来设置网格行与列之间的间隙，该属性是row-gap and column-gap的简写形式。\n   */\n  gap?: string | number;\n}\n/**布局组件*/\nexport declare const FormLayout: React.MemoExoticComponent<\n  (props: FormLayoutProps) => import('react/jsx-runtime').JSX.Element\n>;\n/**布局组件 占据一整行*/\nexport declare const FormLayoutRows: (props: ViewProps) => import('react/jsx-runtime').JSX.Element;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"表单项布局组件类型",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单项布局组件类型",children:"#"}),"表单项布局组件类型"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nexport interface LayoutFormItemProps {\n  /**规则校验失败错误提示位置*/\n  errorLayout?: 'left-bottom' | 'right-bottom' | 'top-right' | 'top-left';\n  /**必填样式*/\n  required?: boolean;\n  /**label显示模式*/\n  labelMode?: 'left' | 'top' | 'between' | 'hide';\n  /**内容*/\n  children?: React.ReactNode;\n  /**只进行规则样式*/\n  onlyRuleStyle?: boolean;\n  label?: React.ReactNode;\n  /**底部提示内容*/\n  helpText?: React.ReactNode;\n  /**额外内容*/\n  extra?: React.ReactNode;\n  /**是否显示label后的冒号*/\n  showColon?: boolean;\n  /**\n   * 表单项占据列数\n   * @default 1\n   */\n  colSpan?: number;\n  htmlFor?: string;\n  /**规则验证结果*/\n  validateResult?: {\n    tip: string | (string | undefined)[];\n    isInvalid: boolean;\n  };\n  style?: React.CSSProperties;\n  labelStyle?: React.CSSProperties;\n  /**底部边框*/\n  inputBordered?: boolean;\n}\n/**布局组件 表单项*/\nexport declare const LayoutFormItem: React.MemoExoticComponent<\n  (props: LayoutFormItemProps) => import('react/jsx-runtime').JSX.Element\n>;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"表单项参数",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单项参数",children:"#"}),"表单项参数"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { RuleInstanceBase, FormInstanceBase, FormItemInstanceBase } from '@carefrees/form-utils';\nimport { RegisterFormItemOptions } from '@carefrees/form-utils-react-hooks';\nimport React from 'react';\nexport interface FormItemAttrOptions extends RegisterFormItemOptions {\n    /**依赖更新项*/\n    dependencies?: string[];\n    /**通知 只用于校验规则提示 字段 */\n    noticeOnlyRuleDataField?: string[];\n    /**通知父级字段监听方法更新*/\n    isNoticeParentField?: boolean;\n    /**通知watch监听方法更新*/\n    noticeWatchField?: string[];\n    /**是否保护值(不进行表单项组件卸载重置初始值)*/\n    preserve?: boolean;\n    /**重写规则*/\n    useRules?: (ruleInstance: RuleInstanceBase, form: FormInstanceBase, formItemInstance: FormItemInstanceBase) => void;\n    /**输入框属性重写*/\n    useAttrs?: (attrs: any, form: FormInstanceBase, formItemInstance: FormItemInstanceBase) => any;\n    /**输入框属性*/\n    attrs?: any;\n    /**传递组件字段*/\n    valuePropName?: string;\n    /**取值字段(默认text)*/\n    getValuePath?: string;\n    /**自定义获取值*/\n    getValueFromEvent?: (event: any, form: FormInstanceBase, formItemInstance: FormItemInstanceBase) => any;\n    /**值格式化*/\n    formatValue?: (value: any, form: FormInstanceBase, formItemInstance: FormItemInstanceBase, event: any) => any;\n    /**触发数据更新之后触发（用于数据联动之类的）*/\n    onAfterUpdate?: (value: any, form: FormInstanceBase, formItemInstance: FormItemInstanceBase, event: any) => void;\n    /**事件名称*/\n    trigger?: string;\n    /**子元素*/\n    children?: React.ReactNode;\n}\n/**表单项参数*/\nexport declare const useFormItemAttr: (options: FormItemAttrOptions) => {\n    children: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | Iterable<React.ReactNode>;\n    form: FormInstanceBase<any>;\n    formItemInstance: FormItemInstanceBase;\n    ruleInstance: RuleInstanceBase;\n    onChange: (event: any) => void;\n    htmlFor: string;\n    validateResult: {\n        tip: string | (string | undefined)[];\n        isInvalid: boolean;\n    };\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"公共参数类型",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#公共参数类型",children:"#"}),"公共参数类型"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { ViewProps } from 'react-native';\nexport interface AttrsOptions {\n    /**列数据*/\n    colCount?: number;\n    /**规则校验失败错误提示位置*/\n    errorLayout?: 'left-bottom' | 'right-bottom' | 'top-right' | 'top-left';\n    /**\n     * label显示模式\n     */\n    labelMode?: 'left' | 'top' | 'between' | 'hide';\n    /**是否显示label后的冒号*/\n    showColon?: boolean;\n    /**表单项 style*/\n    formItemStyle?: ViewProps['style'];\n    /**表单项 label  style*/\n    formItemLabelStyle?: ViewProps['style'];\n    /**\n     * 输入框底部边框\n     */\n    inputBordered?: boolean;\n}\n/**公共属性 Context */\nexport declare const AttrsContext: import(\"react\").Context<AttrsOptions>;\n/**子项中获取公共属性*/\nexport declare const useAttrs: () => AttrsOptions;\n\n"})})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a(e)}let m=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["react%2Freact-native.md"]={toc:[{id:"安装",text:"安装",depth:2},{id:"使用",text:"使用",depth:2},{id:"基本使用",text:"基本使用",depth:3},{id:"控制隐藏",text:"控制隐藏",depth:3},{id:"表单字段监听",text:"表单字段监听",depth:3},{id:"list-表单项",text:"list 表单项",depth:3},{id:"表单项依赖更新dependencies-参数",text:"表单项依赖更新(dependencies 参数)",depth:3},{id:"布局组件",text:"布局组件",depth:3},{id:"类型",text:"类型",depth:2},{id:"form-表单",text:"Form 表单",depth:3},{id:"formitem-表单项",text:"FormItem 表单项",depth:3},{id:"formlist-表单-list",text:"FormList 表单 List",depth:3},{id:"布局组件-类型",text:"布局组件 类型",depth:3},{id:"表单项布局组件类型",text:"表单项布局组件类型",depth:3},{id:"表单项参数",text:"表单项参数",depth:3},{id:"公共参数类型",text:"公共参数类型",depth:3}],title:"React Native",headingTitle:"React Native",frontmatter:{}}}}]);