"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["907"],{9638:function(e,n,r){r.r(n),r.d(n,{default:()=>i});var t=r(4246),o=r(980);function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code",h3:"h3"},(0,o.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"react-中使用",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#react-中使用",children:"#"}),"React 中使用"]}),"\n",(0,t.jsxs)(n.h2,{id:"安装",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"}),"安装"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @carefrees/form-utils-react # yarn add @carefrees/form-utils-react # pnpm add @carefrees/form-utils-react\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"使用",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用",children:"#"}),"使用"]}),"\n",(0,t.jsxs)(n.h3,{id:"基本使用",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本使用",children:"#"}),"基本使用"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Form, FormItem } from \'@carefrees/form-utils-react\';\nimport React, { useState } from \'react\';\n\nconst Demo = () => {\n  const [formData] = useState({ name: \'张三\', age: 18 });\n  const form = useForm();\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form formData={formData} form={form}>\n      <FormItem rules={[{ required: true, message: \'必填\' }]} name="name" label="name">\n        <input style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <FormItem name="age" label="age">\n        <input style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <button type="button" onClick={onSubmit}>\n        验\uD83D\uDE01\uD83D\uDE1D证\n      </button>\n    </Form>\n  );\n};\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"控制隐藏",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#控制隐藏",children:"#"}),"控制隐藏"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Form, FormItem, FormHideItem } from \'@carefrees/form-utils-react\';\nimport React, { useState } from \'react\';\n\nconst Demo = () => {\n  const [formData] = useState({ name: \'张三\', age: 18 });\n  const form = useForm();\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onValuesChange = (item: any) => {\n    console.log("item", item)\n    if (Reflect.has(item, \'age\')) {\n      if (item.age === \'18\') {\n        form.updatedFieldHideValue({ address: false })\n      } else {\n        form.updatedFieldHideValue({ address: true })\n      }\n    }\n  }\n\n  return (\n    <Form \n      formData={formData} \n      form={form} \n      onValuesChange={onValuesChange}\n      hideData={{ address: true }}\n    >\n      <FormItem rules={[{ required: true, message: \'必填\' }]} name="name" label="name">\n        <input style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <FormItem name="age" label="age">\n        <input style={{ width: \'100%\' }}  placeholder="请输入18,显示address表单项" />\n      </FormItem>\n      <FormHideItem name="address" label="address">\n        <input style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormHideItem>\n      <button type="button" onClick={onSubmit}>\n        验\uD83D\uDE01\uD83D\uDE1D证\n      </button>\n    </Form>\n  );\n};\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"表单字段监听",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单字段监听",children:"#"}),"表单字段监听"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Form, FormItem ,useWatch } from \'@carefrees/form-utils-react\';\nimport React, { useState } from \'react\';\n\n// 子节点\nconst Child = ()=>{\n  // 第一次监听可以获取到值\n  const [value] = useWatch("name")\n  return <div>name值：{value}</div>\n}\n\nconst Demo = () => {\n  const [formData] = useState({ name: \'张三\', age: 18 });\n  const form = useForm();\n\n  // 在表单包裹内,第一次监听获取不到值\n  const [age] = useWatch("age", form)\n  console.log(age)\n\n  const onSubmit = async () => {\n    try {\n      console.log(form);\n      const result = await form.validate();\n      console.log(result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form formData={formData} form={form}>\n      <FormItem rules={[{ required: true, message: \'必填\' }]} name="name" label="name">\n        <input style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <FormItem name="age" label="age">\n        <input style={{ width: \'100%\' }} placeholder="请输入" />\n      </FormItem>\n      <Child />\n      <button type="button" onClick={onSubmit}>\n        验\uD83D\uDE01\uD83D\uDE1D证\n      </button>\n    </Form>\n  );\n};\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"list-表单项",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#list-表单项",children:"#"}),"list 表单项"]}),"\n",(0,t.jsxs)(n.h3,{id:"表单项之间联动校验",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单项之间联动校验",children:"#"}),"表单项之间联动校验"]}),"\n",(0,t.jsxs)(n.h3,{id:"表单输入框属性联动设置",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单输入框属性联动设置",children:"#"}),"表单输入框属性联动设置"]}),"\n",(0,t.jsxs)(n.h3,{id:"布局组件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#布局组件",children:"#"}),"布局组件"]}),"\n",(0,t.jsxs)(n.h2,{id:"类型",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"}),"类型"]}),"\n",(0,t.jsxs)(n.h3,{id:"form-表单",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#form-表单",children:"#"}),"Form 表单"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport { FormInstanceBase, ValidateErrorEntity } from '@carefrees/form-utils';\nimport { FormLayoutProps } from '@carefrees/form-utils-react/esm/layout';\n\nexport interface FormProps<T = any> extends FormLayoutProps {\n  children?: React.ReactNode;\n  form?: FormInstanceBase;\n  style?: React.CSSProperties;\n  className?: string;\n  layoutClassName?: string;\n  layoutStyle?: React.CSSProperties;\n  /**表单数据*/\n  formData?: any;\n  /**值更新触发*/\n  onValuesChange?: (changedValues: Partial<T>, values: T) => void;\n  /**提交保存 验证成功*/\n  onFinish?: (values: T) => void;\n  /**提交保存 验证失败*/\n  onFinishFailed?: (errorInfo: ValidateErrorEntity<T>) => void;\n  /**隐藏表单项初始值*/\n  hideData?: Record<string, boolean>;\n  /**表单名称*/\n  name?: string;\n  /**隐藏规则校验*/\n  hideRuleData?: Record<string, boolean>;\n  /**自动重置更新formData数据*/\n  isAutoUpdatedFormData?: boolean;\n}\nexport declare function Form<T = any>(props: FormProps<T>): import('react/jsx-runtime').JSX.Element;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"formitem-表单项",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formitem-表单项",children:"#"}),"FormItem 表单项"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { LayoutFormItemProps } from '@carefrees/form-utils-react/esm/layout/layout.formItem';\nimport { FormItemAttrOptions } from '@carefrees/form-utils-react/esm/hooks/attr/attr.FormItem';\nimport React from 'react';\nexport interface FormItemProps extends FormItemAttrOptions, LayoutFormItemProps {\n  /**不进行样式渲染*/\n  noStyle?: boolean;\n}\n/**表单项*/\nexport declare const FormItem: React.MemoExoticComponent<\n  (props: Partial<FormItemProps>) => import('react/jsx-runtime').JSX.Element\n>;\n/**隐藏表单项*/\nexport declare const FormHideItem: React.MemoExoticComponent<\n  (props: FormItemProps) => import('react/jsx-runtime').JSX.Element\n>;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"formlist-表单-list",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formlist-表单-list",children:"#"}),"FormList 表单 List"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { RuleInstanceBase, FormItemInstanceBase, FormListInstanceBase } from '@carefrees/form-utils';\nimport React from 'react';\nimport { RegisterFormListOptions } from '@carefrees/form-utils-react-hooks';\nexport interface FormListChildrenProps {\n  /**数据集合*/\n  fields: {\n    name: number;\n    key: number;\n  }[];\n  /**添加*/\n  onAdd: (initialValue?: Object) => void;\n  /**删除*/\n  onDelete: (index: number | number[]) => void;\n  /**移动*/\n  onMove: (from: number, to: number) => void;\n}\nexport interface FormListProps extends RegisterFormListOptions {\n  children: (\n    options: FormListChildrenProps,\n    instances: {\n      ruleInstance: RuleInstanceBase;\n      formItemInstance: FormItemInstanceBase;\n      formListInstance: FormListInstanceBase;\n    },\n  ) => React.ReactNode;\n}\n/**form list 组件*/\nexport declare const FormList: React.MemoExoticComponent<\n  (props: FormListProps) => import('react/jsx-runtime').JSX.Element\n>;\n/**隐藏 form list item 组件*/\nexport declare const FormHideList: React.MemoExoticComponent<\n  (props: FormListProps) => import('react/jsx-runtime').JSX.Element\n>;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"布局组件-类型",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#布局组件-类型",children:"#"}),"布局组件 类型"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport { AttrsOptions } from '@carefrees/form-utils-react-hooks';\nimport { FormLayoutBodyProps } from '@carefrees/form-utils-react/esm/layout/layout.body';\nexport interface FormLayoutProps extends AttrsOptions, FormLayoutBodyProps {\n  /**标题*/\n  title?: React.ReactNode;\n  /**额外内容*/\n  extra?: React.ReactNode;\n  /**内容*/\n  children?: React.ReactNode;\n  /**是否占据整行*/\n  isAllColSpan?: boolean;\n  className?: string;\n  /**头部ClassName*/\n  headerClassName?: string;\n  /**内容ClassName*/\n  bodyClassName?: string;\n  style?: React.CSSProperties;\n  /**头部样式*/\n  headerStyle?: React.CSSProperties;\n  /**内容样式*/\n  bodyStyle?: React.CSSProperties;\n  /**是否添加边框*/\n  bordered?: boolean;\n}\n/**布局组件*/\nexport declare const FormLayout: React.MemoExoticComponent<\n  (props: FormLayoutProps) => import('react/jsx-runtime').JSX.Element\n>;\nexport interface FormLayoutRowsProps\n  extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {}\n/**布局组件 占据一整行*/\nexport declare const FormLayoutRows: React.ForwardRefExoticComponent<\n  Omit<FormLayoutRowsProps, 'ref'> & React.RefAttributes<HTMLDivElement>\n>;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"布局组件内容-类型",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#布局组件内容-类型",children:"#"}),"布局组件内容 类型"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport { SizeInfo } from '@carefrees/form-utils-react/esm/hooks/useResizeObserver';\nexport interface FormLayoutBodyProps {\n  className?: string;\n  style?: React.CSSProperties;\n  /**列数据*/\n  colCount?: number;\n  /**\n   * @description gap 属性是用来设置网格行与列之间的间隙，该属性是row-gap and column-gap的简写形式。\n   */\n  gap?: string | number;\n  /**\n   * 获取多少行\n   */\n  onGapRow?: (row: number, col: number, target: HTMLDivElement) => void;\n  /**内容大小变化*/\n  onResize?: (size: SizeInfo, target: HTMLDivElement) => void;\n  /**内容*/\n  children?: React.ReactNode;\n}\n/**布局组件-内容区域*/\nexport declare const FormLayoutBody: React.MemoExoticComponent<\n  (props: FormLayoutBodyProps) => import('react/jsx-runtime').JSX.Element\n>;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"表单项布局组件类型",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单项布局组件类型",children:"#"}),"表单项布局组件类型"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nexport interface LayoutFormItemProps {\n  /**规则校验失败错误提示位置*/\n  errorLayout?: 'left-bottom' | 'right-bottom' | 'top-right' | 'top-left';\n  /**必填样式*/\n  required?: boolean;\n  /**label显示模式*/\n  labelMode?: 'left' | 'top' | 'between' | 'hide';\n  /**内容*/\n  children?: React.ReactNode;\n  /**只进行规则样式*/\n  onlyRuleStyle?: boolean;\n  label?: React.ReactNode;\n  /**底部提示内容*/\n  helpText?: React.ReactNode;\n  /**额外内容*/\n  extra?: React.ReactNode;\n  /**是否显示label后的冒号*/\n  showColon?: boolean;\n  /**\n   * 表单项占据列数\n   * @default 1\n   */\n  colSpan?: number;\n  /**\n   * 表单项占据行数\n   * @default 1\n   */\n  rowSpan?: number;\n  htmlFor?: string;\n  /**规则验证结果*/\n  validateResult?: {\n    tip: string | (string | undefined)[];\n    isInvalid: boolean;\n  };\n  style?: React.CSSProperties;\n  className?: string;\n  labelStyle?: React.CSSProperties;\n  labelClassName?: string;\n}\n/**布局组件 表单项*/\nexport declare const LayoutFormItem: React.MemoExoticComponent<\n  (props: LayoutFormItemProps) => import('react/jsx-runtime').JSX.Element\n>;\n"})})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(a,e)})):a(e)}let i=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["react%2Freact.mdx"]={toc:[{id:"安装",text:"安装",depth:2},{id:"使用",text:"使用",depth:2},{id:"基本使用",text:"基本使用",depth:3},{id:"控制隐藏",text:"控制隐藏",depth:3},{id:"表单字段监听",text:"表单字段监听",depth:3},{id:"list-表单项",text:"list 表单项",depth:3},{id:"表单项之间联动校验",text:"表单项之间联动校验",depth:3},{id:"表单输入框属性联动设置",text:"表单输入框属性联动设置",depth:3},{id:"布局组件",text:"布局组件",depth:3},{id:"类型",text:"类型",depth:2},{id:"form-表单",text:"Form 表单",depth:3},{id:"formitem-表单项",text:"FormItem 表单项",depth:3},{id:"formlist-表单-list",text:"FormList 表单 List",depth:3},{id:"布局组件-类型",text:"布局组件 类型",depth:3},{id:"布局组件内容-类型",text:"布局组件内容 类型",depth:3},{id:"表单项布局组件类型",text:"表单项布局组件类型",depth:3}],title:"React 中使用",headingTitle:"React 中使用",frontmatter:{}}}}]);